{"version":3,"sources":["components/TopNav/imgTopNav/viber.svg","components/TopNav/imgTopNav/ig.svg","components/TopNav/imgTopNav/fb.svg","components/TopNav/imgTopNav/yt.svg","components/TopNav/TopNav.jsx","pages/Pocetna/Pocenta.jsx","pages/NoMatch/NoMatch.jsx","App.jsx","serviceWorker.js","index.jsx"],"names":["module","exports","__webpack_require__","p","TopNav","react_default","a","createElement","Fragment","Navbar","className","Container","Text","inline","href","src","ViberIcon","alt","FbIcon","height","IgIcon","YtIcon","Component","Pocenta","TopNav_TopNav_TopNav","NoMatch","App","react_router_dom","react_router","exact","path","component","Pocetna","Boolean","window","location","hostname","match","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,sDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,mDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,mDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,oVCSnBC,mLAEnB,OACCC,EAAAC,EAAAC,cAACF,EAAAC,EAAME,SAAP,KACCH,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAQC,UAAU,4DACjBL,EAAAC,EAAAC,cAACI,EAAA,EAAD,KACCN,EAAAC,EAAAC,cAACE,EAAA,EAAOG,KAAR,CAAaF,UAAU,iBAAiBG,QAAM,GAC7CR,EAAAC,EAAAC,cAAA,KAAGG,UAAU,qCAAqCI,KAAK,KACtDT,EAAAC,EAAAC,cAAA,OAAKG,UAAU,OAAOK,IAAKC,IAAWC,IAAI,eAD3C,eAGAZ,EAAAC,EAAAC,cAAA,QAAMG,UAAU,kBAAhB,4BAEDL,EAAAC,EAAAC,cAACE,EAAA,EAAOG,KAAR,CAAaF,UAAU,kBAAkBG,QAAM,GAC9CR,EAAAC,EAAAC,cAAA,KAAGO,KAAK,IAAIJ,UAAU,QACrBL,EAAAC,EAAAC,cAAA,OAAKQ,IAAKG,IAAQC,OAAO,KAAKF,IAAI,aAEnCZ,EAAAC,EAAAC,cAAA,KAAGO,KAAK,IAAIJ,UAAU,QACrBL,EAAAC,EAAAC,cAAA,OAAKQ,IAAKK,IAAQD,OAAO,KAAKF,IAAI,aAEnCZ,EAAAC,EAAAC,cAAA,KAAGO,KAAK,IAAIJ,UAAU,QACrBL,EAAAC,EAAAC,cAAA,OAAKQ,IAAKM,IAAQF,OAAO,KAAKF,IAAI,wBApBNK,aCNfC,mLAEnB,OACClB,EAAAC,EAAAC,cAACF,EAAAC,EAAME,SAAP,KACCH,EAAAC,EAAAC,cAACiB,EAAD,cAJiCF,aCDhBG,mLAEnB,OACCpB,EAAAC,EAAAC,cAAA,WACCF,EAAAC,EAAAC,cAAA,4BAJiCe,aCGhBI,mLAEnB,OACCrB,EAAAC,EAAAC,cAACF,EAAAC,EAAME,SAAP,KACCH,EAAAC,EAAAC,cAACoB,EAAA,EAAD,KACCtB,EAAAC,EAAAC,cAACqB,EAAA,EAAD,KACCvB,EAAAC,EAAAC,cAACqB,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWC,IACjC3B,EAAAC,EAAAC,cAACqB,EAAA,EAAD,CAAOG,UAAWN,cAPSH,aCObW,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOlC,EAAAC,EAAAC,cAACiC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.f80c6447.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/viber.708888ea.svg\";","module.exports = __webpack_public_path__ + \"static/media/ig.cc5e92b0.svg\";","module.exports = __webpack_public_path__ + \"static/media/fb.8636de95.svg\";","module.exports = __webpack_public_path__ + \"static/media/yt.00c96fb0.svg\";","import React, { Component } from 'react';\nimport { Navbar, Container, InputGroup, Form, FormControl, Button } from 'react-bootstrap';\nimport './TopNav.css';\n\nimport ViberIcon from './imgTopNav/viber.svg';\nimport IgIcon from './imgTopNav/ig.svg';\nimport FbIcon from './imgTopNav/fb.svg';\nimport YtIcon from './imgTopNav/yt.svg';\n\nexport default class TopNav extends Component {\n\trender() {\n\t\treturn (\n\t\t\t<React.Fragment>\n\t\t\t\t<Navbar className=\"topNav navbar-expand navbar-dark justify-content-between\">\n\t\t\t\t\t<Container>\n\t\t\t\t\t\t<Navbar.Text className=\"textTopNavLeft\" inline>\n\t\t\t\t\t\t\t<a className=\"ttextTopNavLeft mr-4 telefonTopNav\" href=\"#\">\n\t\t\t\t\t\t\t\t<img className=\"mr-3\" src={ViberIcon} alt=\"viber icon\" />0800 51 055\n\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t\t<span className=\"textTopNavLeft\">*Besplatni info telefon</span>\n\t\t\t\t\t\t</Navbar.Text>\n\t\t\t\t\t\t<Navbar.Text className=\"textTopNavRight\" inline>\n\t\t\t\t\t\t\t<a href=\"#\" className=\"mr-5\">\n\t\t\t\t\t\t\t\t<img src={FbIcon} height=\"20\" alt=\"fb icon\" />\n\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t\t<a href=\"#\" className=\"mr-5\">\n\t\t\t\t\t\t\t\t<img src={IgIcon} height=\"20\" alt=\"ig icon\" />\n\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t\t<a href=\"#\" className=\"mr-0\">\n\t\t\t\t\t\t\t\t<img src={YtIcon} height=\"20\" alt=\"yt icon\" />\n\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t</Navbar.Text>\n\t\t\t\t\t</Container>\n\t\t\t\t</Navbar>\n\t\t\t</React.Fragment>\n\t\t);\n\t}\n}\n","import React, { Component } from 'react';\nimport TopNav from '../../components/TopNav/TopNav';\n\nexport default class Pocenta extends Component {\n\trender() {\n\t\treturn (\n\t\t\t<React.Fragment>\n\t\t\t\t<TopNav />\n\t\t\t</React.Fragment>\n\t\t);\n\t}\n}\n","import React, { Component } from 'react';\n\nexport default class NoMatch extends Component {\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<p>NoMatch</p>\n\t\t\t</div>\n\t\t);\n\t}\n}\n","import React, { Component } from 'react';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport Pocetna from './pages/Pocetna/Pocenta';\nimport NoMatch from './pages/NoMatch/NoMatch';\n\nexport default class App extends Component {\n\trender() {\n\t\treturn (\n\t\t\t<React.Fragment>\n\t\t\t\t<Router>\n\t\t\t\t\t<Switch>\n\t\t\t\t\t\t<Route exact path=\"/\" component={Pocetna} />\n\t\t\t\t\t\t<Route component={NoMatch} />\n\t\t\t\t\t</Switch>\n\t\t\t\t</Router>\n\t\t\t</React.Fragment>\n\t\t);\n\t}\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}